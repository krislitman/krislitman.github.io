I"ÿ<p>In my last post I set up a background job implementation in a Rails application, you can read that <a href="https://krislitman.github.io/background-jobs-rails/">here</a>. For testing these changes, we will need to make adjustments to the User model, and add in a new test for the UserLogCreateJob class.</p>

<h3 id="user-model-test">User Model Test</h3>

<p>Since the addition of a callback method in the user model (after_create), the test will need to account for enqueuing a job once a new user is created. First add the <a href="https://github.com/rspec/rspec-rails">rspec-rails gem</a> to the Gemfile, afterwards be sure to run <code class="language-plaintext highlighter-rouge">bundle install</code>. To finish setting up RSpec, run the command <code class="language-plaintext highlighter-rouge">rails g rspec:install</code>. That will create a /spec folder with spec_helper &amp; rails_helper ruby files. Create a basic test file for our user under the <strong>spec</strong> directory, in this file ‚Äúspec/models/user_spec.rb‚Äù.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require "rails_helper"

RSpec.describe User, type: :model do

    after(:all) do
        User.destroy_all
        UserLog.destroy_all
    end

    context "Relationships" do
        it "Has User Logs After Create" do
            user = User.create

            expect(user.user_logs.size).to eq(1)
            expect(user.user_logs.first).to be_an_instance_of(UserLog)
            expect(user.user_logs.first.user_id).to eq(user.id)
        end
    end
end
</code></pre></div></div>

<p>Running the test as-is will fail, due to the job not being processed yet so the UserLog has not been created. We can see 0 returning for the logs size in the stack trace:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failure/Error: expect(user.user_logs.size).to eq(1)

       expected: 1
            got: 0
</code></pre></div></div>

<p>To fix this, we will need to add in some test helper methods. To get access to these methods we will need to include <code class="language-plaintext highlighter-rouge">ActiveJob::TestHelper</code>. That will provide the method #perform_enqueued_jobs that will process the job we need for this test to pass. With these changes the test will now pass:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require "rails_helper"

RSpec.describe User, type: :model do
    include ActiveJob::TestHelper

    after(:all) do
        User.destroy_all
        UserLog.destroy_all
    end

    context "Relationships" do
        it "Has User Logs After Create" do
            user = User.create
            perform_enqueued_jobs

            expect(user.user_logs.size).to eq(1)
            expect(user.user_logs.first).to be_an_instance_of(UserLog)
            expect(user.user_logs.first.user_id).to eq(user.id)
        end
    end
end
</code></pre></div></div>

<p>In addition to a model test, I‚Äôm going to create a specific test for our job in <strong>spec/jobs/user_log_create_job_spec.rb</strong>. After instantiating a new User, we can assert that a job to create a new user_log record has been enqueued. A basic test setup using User &amp; UserLog models will look something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require "rails_helper"

RSpec.describe UserLogCreateJob do
    include ActiveJob::TestHelper
    after(:each) do
        User.destroy_all
        UserLog.destroy_all
    end

    context "UserLogCreateJob" do
        it "Is enqueued successfully" do
            assert_enqueued_with(job: UserLogCreateJob) do
                User.create
            end
        end
    end
end
</code></pre></div></div>
<p><strong>In Progress</strong></p>

<h3 id="references">References:</h3>

<p><a href="https://guides.rubyonrails.org/testing.html#testing-jobs">ActiveJob Testing</a></p>
:ET